---
import SketchListerPage from '../layouts/SketchListerPage.astro'
import { getMemberPagesRoutes } from '../utils/index.js'
const routes = getMemberPagesRoutes()

const sketches = routes.filter(
  (p) => p.props.metadata.tags?.includes('sketch') && p.params.alias !== '_example'
)
---

<SketchListerPage>
  <section class="h-full">
    <div class="h-full flex flex-col md:flex-row">
      <div class="p-4 flex flex-col md:py-8">
        <div class="flex justify-between items-start md:flex-col">
          <a href="/" class="ccb-link mb-4 hidden md:block">Back</a>
          <h1 class="mb-4 ccb-h2">sketches</h1>
          <a href="/" class="ccb-link mr-4 md:hidden">Back</a>
        </div>
        <ul
          id="sketch-lister"
          class="space-y-2 max-h-30 overflow-y-scroll md:max-w-50 md:flex-1 md:max-h-full"
        >
          {
            sketches.map((sketch) => (
              <li>
                <button class="ccb-link">{sketch.params.alias + '/' + sketch.params.page}</button>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="m-2 flex-1 shadow-2xl rounded-2xl flex flex-col md:m-8">
        <div id="viewport" class="flex-1 rounded-t-2xl relative max-h-[55vh] md:max-h-[75vh]">
          <div id="toggle-group" class="absolute top-2 right-6 justify-end z-30">
            <button id="toggle-code" class="ccb-link mr-2">Code</button>
            <button id="toggle-sketch" class="ccb-link">Sketch</button>
          </div>
          <pre
            id="code-view"
            class="code p-5 hidden absolute inset-0 bg-[rgba(0,0,0,0.8)] text-white overflow-auto text-xs md:text-base z-20"
          ></pre>
          <iframe
            id="sketch-view"
            src="/_example/loading"
            class="w-full h-full z-10"
          ></iframe>
        </div>
        <div class="p-4 border-t-3 border-neutral-400 border-dashed max-h-[20vh] overflow-auto">
          <p id="sketch-title">...</p>
          <p id="sketch-description">...</p>
          <a id="sketch-link" href="/_example/loading" target="_blank" class="ccb-link">open</a>
        </div>
      </div>
    </div>
    <script define:vars={{ sketches }} is:inline>
      const sketchListerEl = document.getElementById('sketch-lister')
      const viewportEl = document.getElementById('viewport')
      const sketchViewEl = document.getElementById('sketch-view')
      const sketchTitleEl = document.getElementById('sketch-title')
      const sketchDescriptionEl = document.getElementById('sketch-description')
      const sketchLinkEl = document.getElementById('sketch-link')
      const sketchButtons = sketchListerEl.querySelectorAll('button')
      const codeViewEl = document.getElementById('code-view')
      const toggleCodeBtn = document.getElementById('toggle-code')
      const toggleSketchBtn = document.getElementById('toggle-sketch')
      const toggleGroupEl = document.getElementById('toggle-group')

      toggleCodeBtn.addEventListener('click', () => {
        codeViewEl.classList.remove('hidden')
        codeViewEl.classList.add('block')
      })

      toggleSketchBtn.addEventListener('click', () => {
        codeViewEl.classList.remove('block')
        codeViewEl.classList.add('hidden')
      })

      function hideToggleViewButtons() {
        const toggleGroupEl = document.getElementById('toggle-group')
        const codeViewEl = document.getElementById('code-view')
        const sketchViewEl = document.getElementById('sketch-view')

        // Ensure the 'hidden' class is present and not duplicated on toggleGroupEl
        if (!toggleGroupEl.classList.contains('hidden')) {
          toggleGroupEl.classList.add('hidden')
        }

        // Hide the code view and show the sketch view
        codeViewEl.classList.add('hidden')
        codeViewEl.classList.remove('block')
        sketchViewEl.classList.add('block')
        sketchViewEl.classList.remove('hidden')
      }

      // grabs the code file and dumps the plain text into the page
      function loadSketchCode(s) {
        let source
        if (s.props.metadata.source) {
          source = window.location.href.includes('localhost')
            ? `/src/members/${s.params.alias}/${s.props.metadata.source}`
            : `/sketch-files/${s.props.metadata.source}`
        } else {
          codeViewEl.innerHTML = ''
        }
        if (source) {
          window
            .fetch(source)
            .then((res) => res.text())
            .then((res) => {
              codeViewEl.innerHTML = res.split('//# sourceMappingURL')[0]?.trim()
            })
        }
        return source
      }

      function loadSketch(s) {
        const sourceCode = loadSketchCode(s)
        if (!sourceCode) {
          hideToggleViewButtons()
        } else {
          toggleGroupEl.classList.remove('hidden')
        }

        const url = `/${s.params.alias}/${s.params.page}`
        sketchViewEl.setAttribute('src', url)
        sketchTitleEl.innerHTML = s.props?.metadata?.title
        sketchDescriptionEl.innerHTML = s.props?.metadata?.description
        sketchLinkEl.setAttribute('href', url)
      }

      for (let i = 0; i < sketchButtons.length; i++) {
        sketchButtons[i].addEventListener('click', () => {
          const s = sketches[i]
          loadSketch(s)
        })
      }

      const randomIndex = Math.floor(Math.random() * sketches.length)
      loadSketch(sketches[randomIndex])
    </script>
  </section>
</SketchListerPage>
